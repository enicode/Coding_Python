# DP
# 3*N 타일 채우는 방법 = 한번에 나눌수 없게 벽을 채우는 방법 2가지 * 3*0의 벽을 채우는 방법의 수(1) <= 힌트의 3*4 채우는 방법의 연장
#                       + 3*(N-2)까지 벽을 채워 왔던 방법 * 3*2 까지 벽을 채우는 경우의 수 (이 부분 부터 DP)
#                       + 3*(N-4)까지 벽을 채워 왔던 방법 * 3*4 까지 벽을 쪼갤수 없는 방법으로 채우는 경우의 수(2) <= 힌트의 3*4 채우는 방법의 연장
#                       + 3*(N-6)까지 벽을 채워 왔던 방법 * 3*6 까지 벽을 쪼갤수 없는 방법으로 채우는 경우의 수(2)
#                       + ...
# 그리고 중복을 제거해야한다.
# 채우는 방법의 최소 단위는 짝수 이다. 기본이 2, 4 // N 이 홀수면 다 채울수가 없다. 벽이 홀수 값이므로

import sys

sys.stdin = open('7th\\iuput','r')

n = int(sys.stdin.readline())

# 홀수일 때 0 , 즉 채울수 없다는 뜻
num_cases = [0 for _ in range(31)]
# 0 일 때는 하나도 안붙여도 다 채운것이므로 1
num_cases[0] = 1
# 3*2는 3가지 방법으로 채울 수 있다.
num_cases[2] = 3
# 짝수 일 때만 연산 하면 됨
if n%2 == 0:
    for i in range(4, n+1, 2):
        # 3*2 벽돌로 채우는 방법의 수로 초기 값을 넣어준다.(3번째 줄 설명)
        num_cases[i] = num_cases[i-2]*num_cases[2]
        # 3*4 ~~~ 3*N이 될 때까지 벽돌로 채우는 방법의 수를 계속 더함
        for j in range(4, i+1, 2):
            num_cases[i] += num_cases[i-j]*2

print(num_cases[n])